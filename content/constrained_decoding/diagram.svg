<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.50.0 (0)
 -->
<!-- Title: Entity Relationship Diagram created by erdantic Pages: 1 -->
<svg width="1230pt" height="441pt"
 viewBox="0.00 0.00 1230.00 441.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 437)">
<title>Entity Relationship Diagram created by erdantic</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-437 1226,-437 1226,4 -4,4"/>
<text text-anchor="middle" x="611" y="-6.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="9.00" fill="#a8a8a8">Created by erdantic v1.0.3 &lt;https://github.com/drivendataorg/erdantic&gt;</text>
<!-- __main__.Amount -->
<g id="node1" class="node">
<title>__main__.Amount</title>
<g id="a_node1"><a xlink:title="__main__.Amount&#10;&#10;Usage docs: https://docs.pydantic.dev/2.5/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1155.5,-140 1155.5,-161 1222.5,-161 1222.5,-140 1155.5,-140"/>
<text text-anchor="start" x="1164.5" y="-147.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Amount</text>
<polygon fill="none" stroke="black" points="1155.5,-119 1155.5,-140 1191.5,-140 1191.5,-119 1155.5,-119"/>
<text text-anchor="start" x="1158.5" y="-125.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">value</text>
<polygon fill="none" stroke="black" points="1191.5,-119 1191.5,-140 1222.5,-140 1222.5,-119 1191.5,-119"/>
<text text-anchor="start" x="1194.5" y="-125.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1155.5,-98 1155.5,-119 1191.5,-119 1191.5,-98 1155.5,-98"/>
<text text-anchor="start" x="1160" y="-104.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">units</text>
<polygon fill="none" stroke="black" points="1191.5,-98 1191.5,-119 1222.5,-119 1222.5,-98 1191.5,-98"/>
<text text-anchor="start" x="1200" y="-104.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">str</text>
</a>
</g>
</g>
<!-- __main__.Component -->
<g id="node2" class="node">
<title>__main__.Component</title>
<g id="a_node2"><a xlink:title="__main__.Component&#10;&#10;Usage docs: https://docs.pydantic.dev/2.5/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="902,-361 902,-382 1032,-382 1032,-361 902,-361"/>
<text text-anchor="start" x="932.5" y="-368.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Component</text>
<polygon fill="none" stroke="black" points="902,-340 902,-361 980,-361 980,-340 902,-340"/>
<text text-anchor="start" x="925.5" y="-346.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">name</text>
<polygon fill="none" stroke="black" points="980,-340 980,-361 1032,-361 1032,-340 980,-340"/>
<text text-anchor="start" x="999" y="-346.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="902,-319 902,-340 980,-340 980,-319 902,-319"/>
<text text-anchor="start" x="920" y="-325.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">amount</text>
<polygon fill="none" stroke="black" points="980,-319 980,-340 1032,-340 1032,-319 980,-319"/>
<text text-anchor="start" x="983" y="-325.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Amount</text>
<polygon fill="none" stroke="black" points="902,-298 902,-319 980,-319 980,-298 902,-298"/>
<text text-anchor="start" x="905" y="-304.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">reaction_role</text>
<polygon fill="none" stroke="black" points="980,-298 980,-319 1032,-319 1032,-298 980,-298"/>
<text text-anchor="start" x="999" y="-304.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">str</text>
</a>
</g>
</g>
<!-- __main__.Component&#45;&gt;__main__.Amount -->
<g id="edge1" class="edge">
<title>__main__.Component:e&#45;&gt;__main__.Amount:w</title>
<path fill="none" stroke="black" d="M1043.01,-328.28C1119.05,-316.78 1069.55,-170.42 1139.85,-152.74"/>
<polyline fill="none" stroke="black" points="1033,-329 1037.99,-328.64 "/>
<polyline fill="none" stroke="black" points="1037.99,-328.64 1042.97,-328.29 "/>
<polyline fill="none" stroke="black" points="1155,-151 1150.03,-151.57 "/>
<polygon fill="black" stroke="black" points="1148.47,-146.72 1149.61,-156.65 1147.62,-156.88 1146.48,-146.95 1148.47,-146.72"/>
<polyline fill="none" stroke="black" points="1150.03,-151.57 1145.07,-152.14 "/>
<polygon fill="black" stroke="black" points="1143.5,-147.29 1144.64,-157.23 1142.66,-157.45 1141.51,-147.52 1143.5,-147.29"/>
<polyline fill="none" stroke="black" points="1145.07,-152.14 1140.1,-152.72 "/>
</g>
<!-- __main__.Conditions -->
<g id="node3" class="node">
<title>__main__.Conditions</title>
<g id="a_node3"><a xlink:title="__main__.Conditions&#10;&#10;Usage docs: https://docs.pydantic.dev/2.5/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="258,-326 258,-347 474,-347 474,-326 258,-326"/>
<text text-anchor="start" x="334" y="-333.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Conditions</text>
<polygon fill="none" stroke="black" points="258,-305 258,-326 398,-326 398,-305 258,-305"/>
<text text-anchor="start" x="295" y="-311.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">temperature</text>
<polygon fill="none" stroke="black" points="398,-305 398,-326 474,-326 474,-305 398,-305"/>
<text text-anchor="start" x="401" y="-311.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Temperature</text>
<polygon fill="none" stroke="black" points="258,-284 258,-305 398,-305 398,-284 258,-284"/>
<text text-anchor="start" x="261" y="-290.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">conditions_are_dynamic</text>
<polygon fill="none" stroke="black" points="398,-284 398,-305 474,-305 474,-284 398,-284"/>
<text text-anchor="start" x="423.5" y="-290.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">bool</text>
</a>
</g>
</g>
<!-- __main__.Temperature -->
<g id="node4" class="node">
<title>__main__.Temperature</title>
<g id="a_node4"><a xlink:title="__main__.Temperature&#10;&#10;Usage docs: https://docs.pydantic.dev/2.5/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="627.5,-333 627.5,-354 733.5,-354 733.5,-333 627.5,-333"/>
<text text-anchor="start" x="642" y="-340.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Temperature</text>
<polygon fill="none" stroke="black" points="627.5,-312 627.5,-333 702.5,-333 702.5,-312 627.5,-312"/>
<text text-anchor="start" x="630.5" y="-318.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">control_type</text>
<polygon fill="none" stroke="black" points="702.5,-312 702.5,-333 733.5,-333 733.5,-312 702.5,-312"/>
<text text-anchor="start" x="711" y="-318.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="627.5,-291 627.5,-312 702.5,-312 702.5,-291 627.5,-291"/>
<text text-anchor="start" x="650" y="-297.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">value</text>
<polygon fill="none" stroke="black" points="702.5,-291 702.5,-312 733.5,-312 733.5,-291 702.5,-291"/>
<text text-anchor="start" x="705.5" y="-297.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="627.5,-270 627.5,-291 702.5,-291 702.5,-270 627.5,-270"/>
<text text-anchor="start" x="651.5" y="-276.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">units</text>
<polygon fill="none" stroke="black" points="702.5,-270 702.5,-291 733.5,-291 733.5,-270 702.5,-270"/>
<text text-anchor="start" x="711" y="-276.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">str</text>
</a>
</g>
</g>
<!-- __main__.Conditions&#45;&gt;__main__.Temperature -->
<g id="edge2" class="edge">
<title>__main__.Conditions:e&#45;&gt;__main__.Temperature:w</title>
<path fill="none" stroke="black" d="M484.1,-315.22C539.64,-317.65 558.02,-339.87 611.32,-343.5"/>
<polyline fill="none" stroke="black" points="474,-315 479,-315.11 "/>
<polyline fill="none" stroke="black" points="479,-315.11 484,-315.21 "/>
<polyline fill="none" stroke="black" points="626.5,-344 621.5,-343.84 "/>
<polygon fill="black" stroke="black" points="620.67,-338.81 620.34,-348.8 618.34,-348.73 618.67,-338.74 620.67,-338.81"/>
<polyline fill="none" stroke="black" points="621.5,-343.84 616.51,-343.67 "/>
<polygon fill="black" stroke="black" points="615.67,-338.64 615.34,-348.63 613.34,-348.57 613.67,-338.57 615.67,-338.64"/>
<polyline fill="none" stroke="black" points="616.51,-343.67 611.51,-343.51 "/>
</g>
<!-- __main__.Inputs -->
<g id="node5" class="node">
<title>__main__.Inputs</title>
<g id="a_node5"><a xlink:title="__main__.Inputs&#10;&#10;Usage docs: https://docs.pydantic.dev/2.5/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="280,-412 280,-433 453,-433 453,-412 280,-412"/>
<text text-anchor="start" x="347.5" y="-419.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Inputs</text>
<polygon fill="none" stroke="black" points="280,-391 280,-412 353,-412 353,-391 280,-391"/>
<text text-anchor="start" x="283" y="-397.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">components</text>
<polygon fill="none" stroke="black" points="353,-391 353,-412 453,-412 453,-391 353,-391"/>
<text text-anchor="start" x="356" y="-397.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">List[Component]</text>
</a>
</g>
</g>
<!-- __main__.Inputs&#45;&gt;__main__.Component -->
<g id="edge3" class="edge">
<title>__main__.Inputs:e&#45;&gt;__main__.Component:w</title>
<path fill="none" stroke="black" d="M464.08,-400.97C649.77,-400.04 702.56,-373.46 885.82,-372.06"/>
<polyline fill="none" stroke="black" points="454,-401 459,-400.99 "/>
<polyline fill="none" stroke="black" points="459,-400.99 464,-400.97 "/>
<polygon fill="black" stroke="black" points="891,-372.04 901.02,-376.5 896,-372.02 901,-372 901,-372 901,-372 896,-372.02 900.98,-367.5 891,-372.04 891,-372.04"/>
<polyline fill="none" stroke="black" points="891,-372.04 886,-372.06 "/>
</g>
<!-- __main__.Measurement -->
<g id="node6" class="node">
<title>__main__.Measurement</title>
<g id="a_node6"><a xlink:title="__main__.Measurement&#10;&#10;Usage docs: https://docs.pydantic.dev/2.5/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="917,-81 917,-102 1017,-102 1017,-81 917,-81"/>
<text text-anchor="start" x="926" y="-88.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Measurement</text>
<polygon fill="none" stroke="black" points="917,-60 917,-81 965,-81 965,-60 917,-60"/>
<text text-anchor="start" x="929" y="-66.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">type</text>
<polygon fill="none" stroke="black" points="965,-60 965,-81 1017,-81 1017,-60 965,-60"/>
<text text-anchor="start" x="984" y="-66.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="917,-39 917,-60 965,-60 965,-39 917,-39"/>
<text text-anchor="start" x="923" y="-45.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">details</text>
<polygon fill="none" stroke="black" points="965,-39 965,-60 1017,-60 1017,-39 965,-39"/>
<text text-anchor="start" x="984" y="-45.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="917,-18 917,-39 965,-39 965,-18 917,-18"/>
<text text-anchor="start" x="920" y="-24.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">amount</text>
<polygon fill="none" stroke="black" points="965,-18 965,-39 1017,-39 1017,-18 965,-18"/>
<text text-anchor="start" x="968" y="-24.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Amount</text>
</a>
</g>
</g>
<!-- __main__.Measurement&#45;&gt;__main__.Amount -->
<g id="edge4" class="edge">
<title>__main__.Measurement:e&#45;&gt;__main__.Amount:w</title>
<path fill="none" stroke="black" d="M1028.39,-28.72C1092.78,-38.09 1079.33,-135.73 1139.92,-149.41"/>
<polyline fill="none" stroke="black" points="1018,-28 1022.99,-28.35 "/>
<polyline fill="none" stroke="black" points="1022.99,-28.35 1027.98,-28.69 "/>
<polyline fill="none" stroke="black" points="1155,-151 1150.03,-150.48 "/>
<polygon fill="black" stroke="black" points="1149.56,-145.4 1148.51,-155.34 1146.52,-155.13 1147.57,-145.19 1149.56,-145.4"/>
<polyline fill="none" stroke="black" points="1150.03,-150.48 1145.06,-149.95 "/>
<polygon fill="black" stroke="black" points="1144.58,-144.87 1143.54,-154.82 1141.55,-154.61 1142.6,-144.66 1144.58,-144.87"/>
<polyline fill="none" stroke="black" points="1145.06,-149.95 1140.08,-149.43 "/>
</g>
<!-- __main__.Outcome -->
<g id="node7" class="node">
<title>__main__.Outcome</title>
<g id="a_node7"><a xlink:title="__main__.Outcome&#10;&#10;Usage docs: https://docs.pydantic.dev/2.5/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="300,-139 300,-160 432,-160 432,-139 300,-139"/>
<text text-anchor="start" x="338.5" y="-146.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Outcome</text>
<polygon fill="none" stroke="black" points="300,-118 300,-139 353,-139 353,-118 300,-118"/>
<text text-anchor="start" x="303" y="-124.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">products</text>
<polygon fill="none" stroke="black" points="353,-118 353,-139 432,-139 432,-118 353,-118"/>
<text text-anchor="start" x="356" y="-124.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">List[Product]</text>
</a>
</g>
</g>
<!-- __main__.Product -->
<g id="node8" class="node">
<title>__main__.Product</title>
<g id="a_node8"><a xlink:title="__main__.Product&#10;&#10;Usage docs: https://docs.pydantic.dev/2.5/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="582.5,-119 582.5,-140 779.5,-140 779.5,-119 582.5,-119"/>
<text text-anchor="start" x="657.5" y="-126.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Product</text>
<polygon fill="none" stroke="black" points="582.5,-98 582.5,-119 667.5,-119 667.5,-98 582.5,-98"/>
<text text-anchor="start" x="609.5" y="-104.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">name</text>
<polygon fill="none" stroke="black" points="667.5,-98 667.5,-119 779.5,-119 779.5,-98 667.5,-98"/>
<text text-anchor="start" x="716.5" y="-104.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="582.5,-77 582.5,-98 667.5,-98 667.5,-77 582.5,-77"/>
<text text-anchor="start" x="585.5" y="-83.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">measurements</text>
<polygon fill="none" stroke="black" points="667.5,-77 667.5,-98 779.5,-98 779.5,-77 667.5,-77"/>
<text text-anchor="start" x="670.5" y="-83.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">List[Measurement]</text>
<polygon fill="none" stroke="black" points="582.5,-56 582.5,-77 667.5,-77 667.5,-56 582.5,-56"/>
<text text-anchor="start" x="589" y="-62.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">reaction_role</text>
<polygon fill="none" stroke="black" points="667.5,-56 667.5,-77 779.5,-77 779.5,-56 667.5,-56"/>
<text text-anchor="start" x="716.5" y="-62.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">str</text>
</a>
</g>
</g>
<!-- __main__.Outcome&#45;&gt;__main__.Product -->
<g id="edge5" class="edge">
<title>__main__.Outcome:e&#45;&gt;__main__.Product:w</title>
<path fill="none" stroke="black" d="M443.08,-128.02C496.12,-128.19 515.85,-129.7 566.76,-129.96"/>
<polyline fill="none" stroke="black" points="433,-128 438,-128.01 "/>
<polyline fill="none" stroke="black" points="438,-128.01 443,-128.02 "/>
<polygon fill="black" stroke="black" points="572,-129.98 581.99,-134.5 577,-129.99 582,-130 582,-130 582,-130 577,-129.99 582.01,-125.5 572,-129.98 572,-129.98"/>
<polyline fill="none" stroke="black" points="572,-129.98 567,-129.96 "/>
</g>
<!-- __main__.Product&#45;&gt;__main__.Measurement -->
<g id="edge6" class="edge">
<title>__main__.Product:e&#45;&gt;__main__.Measurement:w</title>
<path fill="none" stroke="black" d="M789.26,-87.05C836.93,-87.52 855.18,-91.2 900.87,-91.89"/>
<polyline fill="none" stroke="black" points="779,-87 784,-87.02 "/>
<polyline fill="none" stroke="black" points="784,-87.02 789,-87.05 "/>
<polygon fill="black" stroke="black" points="906,-91.93 915.97,-96.5 911,-91.96 916,-92 916,-92 916,-92 911,-91.96 916.03,-87.5 906,-91.93 906,-91.93"/>
<polyline fill="none" stroke="black" points="906,-91.93 901,-91.89 "/>
</g>
<!-- __main__.Reaction -->
<g id="node9" class="node">
<title>__main__.Reaction</title>
<g id="a_node9"><a xlink:title="__main__.Reaction&#10;&#10;Usage docs: https://docs.pydantic.dev/2.5/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="0,-318 0,-339 150,-339 150,-318 0,-318"/>
<text text-anchor="start" x="49" y="-325.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Reaction</text>
<polygon fill="none" stroke="black" points="0,-297 0,-318 63,-318 63,-297 0,-297"/>
<text text-anchor="start" x="14.5" y="-303.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">inputs</text>
<polygon fill="none" stroke="black" points="63,-297 63,-318 150,-318 150,-297 63,-297"/>
<text text-anchor="start" x="89.5" y="-303.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Inputs</text>
<polygon fill="none" stroke="black" points="0,-276 0,-297 63,-297 63,-276 0,-276"/>
<text text-anchor="start" x="3" y="-282.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">conditions</text>
<polygon fill="none" stroke="black" points="63,-276 63,-297 150,-297 150,-276 63,-276"/>
<text text-anchor="start" x="76.5" y="-282.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Conditions</text>
<polygon fill="none" stroke="black" points="0,-255 0,-276 63,-276 63,-255 0,-255"/>
<text text-anchor="start" x="8" y="-261.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">workups</text>
<polygon fill="none" stroke="black" points="63,-255 63,-276 150,-276 150,-255 63,-255"/>
<text text-anchor="start" x="69" y="-261.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">List[Workup]</text>
<polygon fill="none" stroke="black" points="0,-234 0,-255 63,-255 63,-234 0,-234"/>
<text text-anchor="start" x="5" y="-240.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">outcomes</text>
<polygon fill="none" stroke="black" points="63,-234 63,-255 150,-255 150,-234 63,-234"/>
<text text-anchor="start" x="66" y="-240.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">List[Outcome]</text>
</a>
</g>
</g>
<!-- __main__.Reaction&#45;&gt;__main__.Conditions -->
<g id="edge7" class="edge">
<title>__main__.Reaction:e&#45;&gt;__main__.Conditions:w</title>
<path fill="none" stroke="black" d="M160.2,-286.68C198.66,-292.05 206.93,-327.46 242.79,-335.42"/>
<polyline fill="none" stroke="black" points="150,-286 154.99,-286.33 "/>
<polyline fill="none" stroke="black" points="154.99,-286.33 159.98,-286.67 "/>
<polyline fill="none" stroke="black" points="258,-337 253.03,-336.48 "/>
<polygon fill="black" stroke="black" points="252.55,-331.41 251.51,-341.35 249.53,-341.14 250.56,-331.2 252.55,-331.41"/>
<polyline fill="none" stroke="black" points="253.03,-336.48 248.05,-335.96 "/>
<polygon fill="black" stroke="black" points="247.58,-330.89 246.54,-340.83 244.55,-340.63 245.59,-330.68 247.58,-330.89"/>
<polyline fill="none" stroke="black" points="248.05,-335.96 243.08,-335.45 "/>
</g>
<!-- __main__.Reaction&#45;&gt;__main__.Inputs -->
<g id="edge8" class="edge">
<title>__main__.Reaction:e&#45;&gt;__main__.Inputs:w</title>
<path fill="none" stroke="black" d="M160.15,-308.73C219.8,-317.78 208.19,-407.63 263.8,-421.27"/>
<polyline fill="none" stroke="black" points="150,-308 154.99,-308.36 "/>
<polyline fill="none" stroke="black" points="154.99,-308.36 159.97,-308.72 "/>
<polyline fill="none" stroke="black" points="279,-423 274.03,-422.43 "/>
<polygon fill="black" stroke="black" points="273.6,-417.35 272.47,-427.29 270.49,-427.06 271.62,-417.13 273.6,-417.35"/>
<polyline fill="none" stroke="black" points="274.03,-422.43 269.06,-421.87 "/>
<polygon fill="black" stroke="black" points="268.64,-416.79 267.51,-426.72 265.52,-426.5 266.65,-416.56 268.64,-416.79"/>
<polyline fill="none" stroke="black" points="269.06,-421.87 264.1,-421.3 "/>
</g>
<!-- __main__.Reaction&#45;&gt;__main__.Outcome -->
<g id="edge9" class="edge">
<title>__main__.Reaction:e&#45;&gt;__main__.Outcome:w</title>
<path fill="none" stroke="black" d="M160.05,-243.45C222.89,-236.3 224.36,-161.99 283.96,-151.28"/>
<polyline fill="none" stroke="black" points="150,-244 154.99,-243.73 "/>
<polyline fill="none" stroke="black" points="154.99,-243.73 159.98,-243.45 "/>
<polygon fill="black" stroke="black" points="289.04,-150.85 299.38,-154.48 294.02,-150.42 299,-150 299,-150 299,-150 294.02,-150.42 298.62,-145.52 289.04,-150.85 289.04,-150.85"/>
<polyline fill="none" stroke="black" points="289.04,-150.85 284.05,-151.27 "/>
</g>
<!-- __main__.Workup -->
<g id="node10" class="node">
<title>__main__.Workup</title>
<g id="a_node10"><a xlink:title="__main__.Workup&#10;&#10;Usage docs: https://docs.pydantic.dev/2.5/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="887,-204 887,-225 1047,-225 1047,-204 887,-204"/>
<text text-anchor="start" x="942.5" y="-211.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Workup</text>
<polygon fill="none" stroke="black" points="887,-183 887,-204 939,-204 939,-183 887,-183"/>
<text text-anchor="start" x="901" y="-189.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">type</text>
<polygon fill="none" stroke="black" points="939,-183 939,-204 1047,-204 1047,-183 939,-183"/>
<text text-anchor="start" x="986" y="-189.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="887,-162 887,-183 939,-183 939,-162 887,-162"/>
<text text-anchor="start" x="895" y="-168.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">details</text>
<polygon fill="none" stroke="black" points="939,-162 939,-183 1047,-183 1047,-162 939,-162"/>
<text text-anchor="start" x="986" y="-168.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="887,-141 887,-162 939,-162 939,-141 887,-141"/>
<text text-anchor="start" x="890" y="-147.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">duration</text>
<polygon fill="none" stroke="black" points="939,-141 939,-162 1047,-162 1047,-141 939,-141"/>
<text text-anchor="start" x="942" y="-147.8" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[Amount]</text>
</a>
</g>
</g>
<!-- __main__.Reaction&#45;&gt;__main__.Workup -->
<g id="edge10" class="edge">
<title>__main__.Reaction:e&#45;&gt;__main__.Workup:w</title>
<path fill="none" stroke="black" d="M160.02,-264.98C474.98,-264 559.44,-216.52 871.94,-215.04"/>
<polyline fill="none" stroke="black" points="150,-265 155,-264.99 "/>
<polyline fill="none" stroke="black" points="155,-264.99 160,-264.98 "/>
<polygon fill="black" stroke="black" points="877,-215.02 887.01,-219.5 882,-215.01 887,-215 887,-215 887,-215 882,-215.01 886.99,-210.5 877,-215.02 877,-215.02"/>
<polyline fill="none" stroke="black" points="877,-215.02 872,-215.04 "/>
</g>
<!-- __main__.Workup&#45;&gt;__main__.Amount -->
<g id="edge11" class="edge">
<title>__main__.Workup:e&#45;&gt;__main__.Amount:w</title>
<path fill="none" stroke="black" d="M1057.12,-151C1090.91,-151 1105.81,-151 1136.64,-151"/>
<polyline fill="none" stroke="black" points="1047,-151 1052,-151 "/>
<polyline fill="none" stroke="black" points="1052,-151 1057,-151 "/>
<polyline fill="none" stroke="black" points="1155,-151 1150,-151 "/>
<polygon fill="black" stroke="black" points="1149,-146 1149,-156 1147,-156 1147,-146 1149,-146"/>
<polyline fill="none" stroke="black" points="1150,-151 1145,-151 "/>
<ellipse fill="none" stroke="black" cx="1141" cy="-151" rx="4" ry="4"/>
</g>
</g>
</svg>
